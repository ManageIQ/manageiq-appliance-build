# Kickstart file automatically generated by anaconda.

# By default run the text based installer to see dependency info in screenshots
<%= ENV['KS_GUI'] ? "" : "text" %>

logging --level=debug

#version=DEVEL
cdrom

<%= render_partial "main/repos" %>

lang en_US.UTF-8
keyboard us
<%= render_partial "main/network" %>

# Root password: smartvm
rootpw  --iscrypted $1$DZprqvCu$mhqFBjfLTH/PVvZIompVP/

selinux --enforcing
timezone --utc America/New_York

<%= render_partial "main/bootloader" %>
<%= render_partial "main/disk_layout" %>

module --name mod_auth_openidc
module --name ruby --stream 3.0
module --name postgresql --stream 13

reboot

%packages --excludedocs
@base --nodefaults

<%= render_partial "packages/includes" %>
<%= render_partial "packages/excludes" %>

%end

%post --log=/root/anaconda-post.log
(
# Redirect stdin to be /dev/tty3
exec < /dev/tty3

chvt 3
set -x

# Show timestamps on log entries for build performance tuning.
PS4="+ [\t] "

# Don't install doc nor weak dependencies
dnf config-manager --setopt=tsflags=nodocs --setopt=install_weak_deps=False --save > /dev/null

# Mount tmpfs on /tmp. This will remove about 200MiB of bower and bundler
# intermediate files from the image. And do the same for /var/cache which saves
# another 115MiB in dnf cache files.
mount -t tmpfs tmpfs /tmp
mount -t tmpfs tmpfs /var/cache

# For some reason, DEBUG is set but empty in the kickstart.
# Unset it so ruby_parser doesn't print LOTS of output.
unset DEBUG

# We don't need a session store in anaconda so force Rails to use memory store
# since rails 5 mem_cache_store tries to connect to a not running memcached.
# See: https://github.com/ManageIQ/manageiq/pull/6751
export RAILS_USE_MEMORY_STORE="true"

# ensure /usr/local/bin is on the path (for virtualenv)
export PATH=$PATH:/usr/local/bin

<%= render_partial "post/firewalld" %>

<%= render_partial "post/repos" %>

source /etc/default/evm
$APPLIANCE_SOURCE_DIRECTORY/manageiq-setup.sh

<%= render_partial "post/systemd" %>

# Disable zeroconfig to allow access to meta-data service by cloud-init
cat >> /etc/sysconfig/network << EOF
NETWORKING=yes
NOZEROCONF=yes
EOF

# Let's rebuild the ramfs with with base scsi drivers we need
kversion=$(rpm -q kernel --qf '%{version}-%{release}.%{arch}\n')
ramfsfile="/boot/initramfs-$kversion.img"
<% case @target
   when "azure", "hyperv" %>
drivers="mptbase mptscsih mptspi hv_storvsc hid_hyperv hv_netvsc hv_vmbus"
<% when "ec2" %>
drivers="mptbase mptscsih mptspi xen-blkfront xen-netfront"
<% when "vsphere" %>
drivers="mptspi vmw_pvscsi"
<% else %>
drivers="mptbase mptscsih mptspi"
<% end %>
dracut --force --add-drivers "$drivers" $ramfsfile $kversion

<%= render_partial "post/ec2" if @target == "ec2" %>
<%= render_partial "post/azure" if @target == "azure" %>
<%= render_partial "post/gce" if @target == "gce" %>
<%= render_partial "post/vagrant" if @target == "vagrant" %>

# make sure there is a new line at the end of sshd_config
echo "" >> /etc/ssh/sshd_config

# Remove packages not needed
dnf -C -y --noplugins remove linux-firmware doxygen

# Ensure packages are up to date
dnf -y update --nobest

/usr/bin/generate_rpm_manifest.sh

# CentOS 7.3 isn't clearing out spaces during install.
# Add a workaround to write zeros and manually clear out.
partitions="/ /var /var/log /var/log/audit /tmp /home"
for partition in $partitions
do
  dd if=/dev/zero of=$partition/tmp_file bs=1M
  rm -f $partition/tmp_file
done

# Expire root password so that the appliance admin must change it at next login
passwd -e root

# During the image build, dracut sets up ifcfg-en<whatever> for the device.
# On the appliances we expect eth0, so remove all the ifcfg-en<whatever> device configurations
# and write a config for eth0 allowing the 'network' service to come up cleanly.
rm -f /etc/sysconfig/network-scripts/ifcfg-en*

# Remove machine-id
cat /dev/null > /etc/machine-id

cat <<EOF > /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=no
NM_CONTROLLED=no
DEFROUTE=yes
EOF

chvt 1
) 2>&1 | tee /dev/tty3
%end
