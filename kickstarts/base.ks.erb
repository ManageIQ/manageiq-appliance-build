# Kickstart file automatically generated by anaconda.

# By default run the text based installer to see dependency info in screenshots
<%= ENV['KS_GUI'] ? "" : "text" %>

logging --level=debug

#version=DEVEL
install
cdrom

<%= render_partial "main/repos" %>

lang en_US.UTF-8
keyboard us
<%= render_partial "main/network" %>
rootpw  --iscrypted $1$DZprqvCu$mhqFBjfLTH/PVvZIompVP/

authconfig --enableshadow --passalgo=sha512
selinux --enforcing
timezone --utc America/New_York

device mptbase
device mptscsih
device mptspi

<%= render_partial "main/bootloader" %>
<%= render_partial "main/disk_layout" %>
<%= render_partial "main/db_fs" %>

reboot

%packages
@base --nodefaults
@server-policy --nodefaults
@development tools

<%= render_partial "packages/includes" %>
<%= render_partial "packages/excludes" %>

%end

%post --log=/root/anaconda-post.log
(
# Redirect stdin to be /dev/tty3
exec < /dev/tty3

chvt 3
set -x

# Show timestamps on log entries for build performance tuning.
PS4="+ [\t] "

# Mount tmpfs on /tmp. This will remove about 200MiB of bower and bundler
# intermediate files from the image. And do the same for /var/cache which saves
# another 115MiB in yum cache files.
mount -t tmpfs tmpfs /tmp
mount -t tmpfs tmpfs /var/cache

# For some reason, DEBUG is set but empty in the kickstart.
# Unset it so ruby_parser doesn't print LOTS of output.
unset DEBUG

# We don't need a session store in anaconda so force Rails to use memory store
# since rails 5 mem_cache_store tries to connect to a not running memcached.
# See: https://github.com/ManageIQ/manageiq/pull/6751
export RAILS_USE_MEMORY_STORE="true"

<%= render_partial "post/firewalld" %>

<%= render_partial "post/source_setup" %>

<%= render_partial "post/repos" %>

<%= render_partial "post/ruby_install" %>

<%= render_partial "post/bundler" %>

# needs to run *BEFORE* the ui_compile
<%= render_partial "post/node_install" %>

# needs to run *after* post/bundler
<%= render_partial "post/ui_compile" %>

# appliance_root="/opt/manageiq/manageiq-appliance" -- in post/source_setup partial
$appliance_root/manageiq-setup.sh

<%= render_partial "post/systemd" %>

<%= render_partial "post/db_init" %>

# make sure we have the device name in all ifcfg-* files
ls /etc/sysconfig/network-scripts/ifcfg-* | while read FILE
do
  # parse the device name from FILE
  DEVICE=${FILE##*-}
  grep -q 'DEVICE=' $FILE || echo "DEVICE=$DEVICE" >> $FILE
done

# Disable zeroconfig to allow access to meta-data service by cloud-init
cat >> /etc/sysconfig/network << EOF
NETWORKING=yes
NOZEROCONF=yes
EOF

# Let's rebuild the ramfs with with base scsi drivers we need
kversion=$(rpm -q kernel --qf '%{version}-%{release}.%{arch}\n')
ramfsfile="/boot/initramfs-$kversion.img"
drivers="mptbase mptscsih mptspi"
<% case @target
   when "azure", "hyperv" %>
drivers="$drivers hv_storvsc hid_hyperv hv_netvsc hv_vmbus"
<% when "ec2" %>
drivers="$drivers xen-blkfront xen-netfront"
<% end %>
/sbin/dracut --force --add-drivers "$drivers" $ramfsfile $kversion

<%= render_partial "post/ec2" if @target == "ec2" %>
<%= render_partial "post/azure" if @target == "azure" %>
<%= render_partial "post/gce" if @target == "gce" %>
<%= render_partial "post/vagrant" if @target == "vagrant" %>

# make sure there is a new line at the end of sshd_config
echo "" >> /etc/ssh/sshd_config

# Clean the logs
rm -vf "$vmdb_root"/log/*.log

# CentOS 7.3 isn't clearing out spaces during install.
# Add a workaround to write zeros and manually clear out.
partitions="/ /var /var/log /var/log/audit /tmp /home"
for partition in $partitions
do
  dd if=/dev/zero of=$partition/tmp_file bs=1M
  rm -f $partition/tmp_file
done

chvt 1
) 2>&1 | tee /dev/tty3
%end
